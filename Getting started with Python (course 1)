Q: Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Use 35 hours and a rate of 2.75 per hour to test
the program (the pay should be 96.25). You should use input to read a string and float() to convert the string to a number. Do not worry about error checking or bad user data.
Working code:
hrs = float(input("Enter Hours:"))
rate=float(input("Enter rate: "))
pay=hrs*rate
print(f'Pay: {pay}' )

Q: Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Pay the hourly rate for the hours up to 40 and 1.5 times the hourly rate
for all hours worked above 40 hours.
Working code:
hrs=float(input("Enter hours: "))
rate=float(input("Enter Rate: "))
if hrs<40:
    pay=rate*hrs
    print(pay)
elif hrs>=40:
    pay=40*rate
    hrs=hrs-40
    rate=rate*1.5
    pay=pay+rate*hrs
    print(pay)
    
 Q: Write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error. If the score is between 0.0 and 1.0, print a grade using the following table:
Score Grade
>= 0.9 A
>= 0.8 B
>= 0.7 C
>= 0.6 D
< 0.6 F
If the user enters a value out of range, print a suitable error message
Working code:
score = float(input("Enter Score: "))
if score>1 or score<0:
    print("Invalid score")
elif score<=1 and score>=0.9:
    print("A")
elif score>=0.8 and score <0.9:
    print("B")
elif score>=0.7 and score<0.8:
    print("C")
elif score>=0.6 and score <0.7:
    print("D")
elif score<0.6:
    print("F")


Q: Write a program to prompt the user for hours and rate per hour using input to compute gross pay. Pay should be the normal rate for hours up to 40 
and time-and-a-half for the hourly rate for all hours worked above 40 hours. Put the logic to do the computation of pay in a function called computepay()
and use the function to do the computation. The function should return a value. Use 45 hours and a rate of 10.50 per hour to test the program (the pay should be 498.75).
You should use input to read a string and float() to convert the string to a number. Do not worry about error checking the user input unless you want to -
you can assume the user types numbers properly. Do not name your variable sum or use the sum() function.
Working code:
def computepay(hours,price):
    if hours<40:
        return hours*price
    elif hours>40:
        newHrs=hours-40
        newPrice=price*1.5
        return (newHrs*newPrice+40*price)
hrs=float(input("Enter hours: "))
rate=float(input("Enter rate: "))
print(f'Pay {computepay(hrs,rate)}')


Q:Write a program that repeatedly prompts a user for integer numbers until the user enters 'done'. Once 'done' is entered, print out the largest and smallest of the numbers.
If the user enters anything other than a valid number catch it with a try/except and put out an appropriate message and ignore the number. 
Enter 7, 2, bob, 10, and 4 and match the output below.
Working code:
largest=None
smallest=None
while True:
    num=input("Enter number: ")
    if num=='done'or num=='Done':
        break
    try:
        num=int(num)
    except ValueError:
        print("Invalid input")
        continue
    if smallest is None:
        smallest=num
        largest=num
    if num > largest:
        largest = num
    elif num < smallest:
        smallest = num
print(f'Maximum is {largest}')
print(f'Minimum is {smallest}')
